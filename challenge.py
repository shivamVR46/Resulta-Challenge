# -*- coding: utf-8 -*-
"""Challenge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mvHHUssx6aDT10jNp-PcTX2UqT5LRWrI
"""

import requests
import json
from datetime import date, timedelta
import time

class Scoreboard:
  """ Scoreboard class loads and stores the data from the scoreboard url """

  def __init__(self, start_date, end_date):
    """ Parameterized constructor for Scoreboard class which initialze the start date, the end date and the url of the scoreboard """
    self.start_date = start_date
    self.end_date =  end_date
    self.__url = 'https://delivery.chalk247.com/scoreboard/NFL/' + str(start_date) + '/' + str(end_date) +'.json?api_key=74db8efa2a6db279393b433d97c2bc843f8e32b0'
    self.scoreboard = self.__callScoreboard()

  def __callScoreboard(self):
    """ callScoreboard is a private method which calls the URL and gets the json response while converting it into dictionary """
    scoreboard_request = requests.get(self.__url)
    scoreboard = scoreboard_request.json()
    return scoreboard

  def getScoreboard(self):
    """ getScoreboard provides with dictionary of scoreboard where key is the result data and value is the whole json associated with the data """
    return scoreboard

  def parseEvents(self):
    """ parseEvents provides with dictionary of scoreboard where key is the event id and value is the whole json associated with the event id """
    event_info = []
    start_copy = self.start_date
    end_copy = self.end_date
    delta = timedelta(days=1)
    while  start_copy<= end_copy:
      st = str(start_copy)
      if len(scoreboard["results"][st]) != 0:
        data = scoreboard["results"][st]["data"]
        for key in data:
          event_info.append(data[key])
      start_copy += delta
    return event_info
  
class TeamDetails:
  """ TeamDetails class loads and stores the data from the Team Ranking url """

  def __init__(self):
    """ Default constructor which intialise the team ranking url """
    self.__url = 'https://delivery.chalk247.com/team_rankings/NFL.json?api_key=74db8efa2a6db279393b433d97c2bc843f8e32b0'
    self.team_details = self.__callTeamRanking()


  def __callTeamRanking(self):
    """ callTeamRanking is the private method which calls the Team Ranking url and stores its value in a 
        dictionary where key is team id and value is the value associated to each team id"""
    team_rankings_request = requests.get(self.__url)
    team_ranking = team_rankings_request.json()
    team_list = team_ranking["results"]["data"]
    my_dict = dict()
    for value in team_list:
      my_dict[value["team_id"]] = value
    
    return my_dict

  def getTeamRanking(self):
    """ getTeamRanking returns dictionary of Team Details """
    return self.team_details
  
  def getTeamRankingByID(self,id):
    """ getTeamRankingByID provides details of the team according to the team id passed """
    return self.team_details[id]



class MyCustomEventInfo_API:
  """ MyCustomEventInfo_API is the class which calls both the Scoreboard and the Team Ranking urls and generates a response combining the results from the API calls"""

  def __init__(self,start_date,end_date):
    """ Default constructor """
    self.scoreboard = Scoreboard(start_date,end_date)
    self.team_details = TeamDetails()
    self.event_info = []

  def getEventInfo(self):
    """ getEventInfo provides the response as required to the end user """
    event_ids = self.scoreboard.parseEvents()
     
    for value in event_ids:
        event_info_dict = {}
        event_info_dict["event_id"] =  value["event_id"]
        event_info_dict["event_date"] = self.__getFormattedDate(value["event_date"].split(" ")[0])
        event_info_dict["event_time"] = value["event_date"].split(" ")[1]
        event_info_dict["away_team_id"] = value["away_team_id"]
        event_info_dict["away_nick_name"] = value["away_nick_name"]
        event_info_dict["away_city"] = value["away_city"]
        event_info_dict["away_rank"] = self.__getTeamDetailsByID(value["away_team_id"])[0]
        event_info_dict["away_rank_points"] = round(float(self.__getTeamDetailsByID(value["away_team_id"])[1]),2)
        event_info_dict["home_team_id"] = value["home_team_id"]
        event_info_dict["home_nick_name"] = value["home_nick_name"]
        event_info_dict["home_city"] = value["home_city"]
        event_info_dict["home_rank"] = self.__getTeamDetailsByID(value["home_team_id"])[0]
        event_info_dict["home_rank_points"] = round(float(self.__getTeamDetailsByID(value["home_team_id"])[1]),2)

        self.event_info.append(event_info_dict)
    return self.event_info

  def __getTeamDetailsByID(self, id):
    """ helper function which returns team ranking and it's adjusted points """
    t_d = self.team_details.getTeamRankingByID(id)
    return [t_d["rank"],t_d["adjusted_points"]]

  def __getFormattedDate(self,date):
    """ helper function to format the date according to the needed response """
    dt = date.split("-")
    return dt[2]+"-"+dt[1]+"-"+dt[0]


def main():
  """  Here sleep(60) is the refresh rate which can be made dynamic or user given """
  while(True):
    start_date = date(2020, 1, 12)
    end_date = date(2020, 1, 19)
    obj = MyCustomEventInfo_API(start_date,end_date)
    result = json.dumps(obj.getEventInfo())
    print(result)
    time.sleep(60)

if __name__ == "__main__":
    main()

